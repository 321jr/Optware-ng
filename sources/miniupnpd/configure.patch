diff -Naur miniupnpd-1.9.20141209/config.h.optware miniupnpd-1.9.20141209-optware/config.h.optware
--- miniupnpd-1.9.20141209/config.h.optware	2015-02-05 12:01:00.852350907 +0200
+++ miniupnpd-1.9.20141209-optware/config.h.optware	2015-02-05 12:19:06.237347189 +0200
@@ -0,0 +1,137 @@
+/* MiniUPnP Project
+ * http://miniupnp.free.fr/ or http://miniupnp.tuxfamily.org/
+ * (c) 2006-2014 Thomas Bernard
+ * generated by ./genconfig.sh on Чтв Фев  5 12:07:46 EET 2015
+ * using command line options  */
+#ifndef CONFIG_H_INCLUDED
+#define CONFIG_H_INCLUDED
+
+#include <inttypes.h>
+
+#define MINIUPNPD_VERSION "1.9"
+
+#define UPNP_VERSION	"20150205"
+#define USE_IFACEWATCHER 1
+#define USE_NETFILTER 1
+#define SUPPORT_REMOTEHOST
+
+#define OS_NAME		"Optware"
+#define OS_VERSION	"Optware"
+#define OS_URL		"http://www.nslu2-linux.org/"
+
+/* syslog facility to be used by miniupnpd */
+#define LOG_MINIUPNPD		 LOG_DAEMON
+
+/* Uncomment the following line to allow miniupnpd to be
+ * controlled by miniupnpdctl */
+/*#define USE_MINIUPNPDCTL*/
+
+/* Comment the following line to disable NAT-PMP operations */
+#define ENABLE_NATPMP
+
+/* Comment the following line to disable PCP operations */
+#define ENABLE_PCP
+
+#ifdef ENABLE_PCP
+/* Uncomment the following line to enable PCP PEER operation */
+/*#define PCP_PEER*/
+#ifdef PCP_PEER
+/*#define PCP_FLOWP*/
+#endif /*PCP_PEER*/
+/*#define PCP_SADSCP*/
+#endif /*ENABLE_PCP*/
+
+/* Uncomment the following line to enable generation of
+ * filter rules with pf */
+/*#define PF_ENABLE_FILTER_RULES*/
+
+/* Uncomment the following line to enable caching of results of
+ * the getifstats() function */
+/*#define ENABLE_GETIFSTATS_CACHING*/
+/* The cache duration is indicated in seconds */
+#define GETIFSTATS_CACHING_DURATION 2
+
+/* Uncomment the following line to enable multiple external ip support */
+/* note : That is EXPERIMENTAL, do not use that unless you know perfectly what you are doing */
+/* Dynamic external ip adresses are not supported when this option is enabled.
+ * Also note that you would need to configure your .conf file accordingly. */
+/*#define MULTIPLE_EXTERNAL_IP*/
+
+/* Comment the following line to use home made daemonize() func instead
+ * of BSD daemon() */
+#define USE_DAEMON
+
+/* Uncomment the following line to enable lease file support */
+#define ENABLE_LEASEFILE
+
+/* Uncomment the following line to enable port in use check */
+/*#define CHECK_PORTINUSE*/
+
+/* Define one or none of the two following macros in order to make some
+ * clients happy. It will change the XML Root Description of the IGD.
+ * Enabling the Layer3Forwarding Service seems to be the more compatible
+ * option. */
+/*#define HAS_DUMMY_SERVICE*/
+#define ENABLE_L3F_SERVICE
+
+/* Enable IP v6 support */
+#define ENABLE_IPV6
+
+/* Define V6SOCKETS_ARE_V6ONLY if AF_INET6 sockets are restricted
+ * to IPv6 communications only. */
+/*#define V6SOCKETS_ARE_V6ONLY*/
+
+/* Enable the support of IGD v2 specification.
+ * This is not fully tested yet and can cause incompatibilities with some
+ * control points, so enable with care. */
+/*#define IGD_V2*/
+
+#ifdef IGD_V2
+/* Enable DeviceProtection service (IGDv2) */
+#define ENABLE_DP_SERVICE
+/*#define ENABLE_HTTPS*/
+/*#define HTTPS_CERTFILE "/path/to/certificate.pem"*/
+/*#define HTTPS_KEYFILE "/path/to/private.key"*/
+
+/* Enable WANIPv6FirewallControl service (IGDv2). needs IPv6 */
+#ifdef ENABLE_IPV6
+#define ENABLE_6FC_SERVICE
+#endif /* ENABLE_IPV6 */
+#endif /* IGD_V2 */
+
+/* UPnP Events support. Working well enough to be enabled by default.
+ * It can be disabled to save a few bytes. */
+#define ENABLE_EVENTS
+
+/* include interface name in pf and ipf rules */
+#define USE_IFNAME_IN_RULES
+
+/* Experimental NFQUEUE support. */
+/*#define ENABLE_NFQUEUE*/
+
+/* Enable to make MiniUPnPd more strict about UPnP conformance
+ * and the messages it receives from control points */
+/*#define UPNP_STRICT*/
+
+/* If SSDP_RESPOND_SAME_VERSION is defined, the M-SEARCH response
+ * include the same device version as was contained in the search
+ * request. It conforms to UPnP DA v1.1 */
+#define SSDP_RESPOND_SAME_VERSION
+
+/* Add the optional Date: header in all HTTP responses */
+/*#define ENABLE_HTTP_DATE*/
+
+/* Wait a little before answering M-SEARCH request */
+/*#define DELAY_MSEARCH_RESPONSE*/
+
+/* disable reading and parsing of config file (miniupnpd.conf) */
+/*#define DISABLE_CONFIG_FILE*/
+
+/* Uncomment the following line to configure all manufacturer infos through miniupnpd.conf */
+#define ENABLE_MANUFACTURER_INFO_CONFIGURATION
+
+#if defined(ENABLE_6FC_SERVICE) || (defined(ENABLE_PCP) && defined(ENABLE_IPV6))
+#define ENABLE_UPNPPINHOLE
+#endif
+
+#endif /* CONFIG_H_INCLUDED */
diff -Naur miniupnpd-1.9.20141209/linux/miniupnpd.init.d.script miniupnpd-1.9.20141209-optware/linux/miniupnpd.init.d.script
--- miniupnpd-1.9.20141209/linux/miniupnpd.init.d.script.orig	2015-02-05 11:55:35.159290826 +0200
+++ miniupnpd-1.9.20141209-optware/linux/miniupnpd.init.d.script	2015-02-05 11:58:26.809416544 +0200
@@ -15,42 +15,31 @@
 
 set -e
 
-MINIUPNPD=/usr/sbin/miniupnpd
-ARGS='-f /etc/miniupnpd/miniupnpd.conf'
+MINIUPNPD=%OPTWARE_TARGET_PREFIX%/sbin/miniupnpd
+ARGS='-f %OPTWARE_TARGET_PREFIX%/etc/miniupnpd/miniupnpd.conf'
 
-IPTABLES_CREATE=/etc/miniupnpd/iptables_init.sh
-IPTABLES_REMOVE=/etc/miniupnpd/iptables_removeall.sh
+IPTABLES_CREATE=%OPTWARE_TARGET_PREFIX%/etc/miniupnpd/iptables_init.sh
+IPTABLES_REMOVE=%OPTWARE_TARGET_PREFIX%/etc/miniupnpd/iptables_removeall.sh
 
 test -f $MINIUPNPD || exit 0
 
-. /lib/lsb/init-functions
 
 case "$1" in
-  start)
-	log_daemon_msg "Starting miniupnpd" "miniupnpd"
-	$IPTABLES_CREATE > /dev/null 2>&1
-	start-stop-daemon --start --quiet --pidfile /var/run/miniupnpd.pid --startas $MINIUPNPD -- $ARGS $LSBNAMES
-	log_end_msg $?
-	;;
-  stop)
-	log_daemon_msg "Stopping miniupnpd" "miniupnpd"
-	start-stop-daemon --stop --quiet --pidfile /var/run/miniupnpd.pid
-	log_end_msg $?
-	$IPTABLES_REMOVE > /dev/null 2>&1
-	;;
+start)  
+	$IPTABLES_CREATE > /dev/null 2>&1                                       
+	start-stop-daemon -S -q -p /var/run/miniupnpd.pid -x $MINIUPNPD -- $ARGS   
+	;;       
+stop)   
+	start-stop-daemon -K -q -p /var/run/miniupnpd.pid -x $MINIUPNPD -- $ARGS                                  
+	$IPTABLES_REMOVE > /dev/null 2>&1                                                                         
+	;; 
   restart|reload|force-reload)
-	log_daemon_msg "Restarting miniupnpd" "miniupnpd"
-	start-stop-daemon --stop --retry 5 --quiet --pidfile /var/run/miniupnpd.pid
-	$IPTABLES_REMOVE > /dev/null 2>&1
-	$IPTABLES_CREATE > /dev/null 2>&1
-	start-stop-daemon --start --quiet --pidfile /var/run/miniupnpd.pid --startas $MINIUPNPD -- $ARGS $LSBNAMES
-	log_end_msg $?
-	;;
-  status)
-	status_of_proc /usr/sbin/miniupnpd miniupnpd
-	;;
-  *)
-	log_action_msg "Usage: /etc/init.d/miniupnpd {start|stop|restart|reload|force-reload}"
+	logger "restarting miniupnpd"                                           
+	start-stop-daemon -K -q -p /var/run/miniupnpd.pid -x $MINIUPNPD -- $ARGS   
+	$IPTABLES_REMOVE > /dev/null 2>&1                                          
+	$IPTABLES_CREATE > /dev/null 2>&1                                  
+	start-stop-daemon -S -q -p /var/run/miniupnpd.pid -x $MINIUPNPD -- $ARGS   
+*)      log_action_msg "Usage: %OPTWARE_TARGET_PREFIX%/etc/init.d/miniupnpd {start|stop|restart|reload|force-reload}"
 	exit 2
 	;;
 esac
diff -Naur miniupnpd-1.9.20141209/Makefile.optware miniupnpd-1.9.20141209-optware/Makefile.optware
--- miniupnpd-1.9.20141209/Makefile.optware	2015-02-05 12:01:00.852350907 +0200
+++ miniupnpd-1.9.20141209-optware/Makefile.optware	2015-02-05 12:43:10.638982278 +0200
@@ -0,0 +1,282 @@
+# $Id: Makefile.linux,v 1.88 2014/10/21 14:04:15 nanard Exp $
+# MiniUPnP project
+# (c) 2006-2014 Thomas Bernard
+# http://miniupnp.free.fr/ or http://miniupnp.tuxfamily.org/
+# Author : Thomas Bernard
+# for use with GNU Make
+#
+# options can be passed to genconfig.sh through CONFIG_OPTIONS :
+# $ CONFIG_OPTIONS="--ipv6 --igd2" make -f Makefile.linux
+#
+# To install use :
+# $ DESTDIR=/dummyinstalldir make -f Makefile.linux install
+# or :
+# $ INSTALLPREFIX=/usr/local make -f Makefile.linux install
+# or :
+# $ make -f Makefile.linux install
+# (default INSTALLPREFIX is /usr)
+#
+# if your system hasn't iptables libiptc headers and binary correctly
+# installed, you need to get iptables sources from http://netfilter.org/
+# ./configure them and build them then miniupnpd will build using :
+# $ IPTABLESPATH=/path/to/iptables-1.4.1 make -f Makefile.linux
+#
+#CFLAGS = -O -g -DDEBUG
+CFLAGS ?= -Os
+CFLAGS += -fno-strict-aliasing
+CFLAGS += -fno-common
+CPPFLAGS += -D_GNU_SOURCE
+CFLAGS += -Wall
+CFLAGS += -Wextra -Wstrict-prototypes -Wdeclaration-after-statement
+#CFLAGS += -Wno-missing-field-initializers
+#CFLAGS += -ansi	# iptables headers does use typeof which is a gcc extension
+CC ?= gcc
+RM = rm -f
+INSTALL = install
+STRIP ?= strip
+PKG_CONFIG ?= pkg-config
+CP = cp
+
+
+INSTALLPREFIX ?= $(PREFIX)
+SBININSTALLDIR = $(INSTALLPREFIX)/sbin
+ETCINSTALLDIR = $(PREFIX)/etc/miniupnpd
+MANINSTALLDIR = $(INSTALLPREFIX)/share/man/man8
+
+BASEOBJS = miniupnpd.o upnphttp.o upnpdescgen.o upnpsoap.o \
+           upnpreplyparse.o minixml.o portinuse.o \
+           upnpredirect.o getifaddr.o daemonize.o upnpglobalvars.o \
+           options.o upnppermissions.o minissdp.o natpmp.o pcpserver.o \
+           upnpevents.o upnputils.o getconnstatus.o \
+           upnppinhole.o pcplearndscp.o asyncsendto.o
+
+LNXOBJS = linux/getifstats.o linux/ifacewatcher.o linux/getroute.o
+NETFILTEROBJS = netfilter/iptcrdr.o netfilter/iptpinhole.o netfilter/nfct_get.o
+
+ALLOBJS = $(BASEOBJS) $(LNXOBJS) $(NETFILTEROBJS)
+
+PCFILE_FOUND := $(shell $(PKG_CONFIG) --exists libiptc; echo $$?)
+
+ifeq (${PCFILE_FOUND},0)
+
+IPTABLESVERSION := $(shell $(PKG_CONFIG) --modversion libiptc)
+IPTABLESVERSION1 := $(shell echo $(IPTABLESVERSION) | cut -d. -f1 )
+IPTABLESVERSION2 := $(shell echo $(IPTABLESVERSION) | cut -d. -f2 )
+IPTABLESVERSION3 := $(shell echo $(IPTABLESVERSION) | cut -d. -f3 )
+# test if iptables version >= 1.4.3
+TEST := $(shell [ \( \( $(IPTABLESVERSION1) -ge 1 \) -a \( $(IPTABLESVERSION2) -ge 4 \) \) -a \( $(IPTABLESVERSION3) -ge 3 \) ] && echo 1 )
+ifeq ($(TEST), 1)
+CPPFLAGS += -DIPTABLES_143
+endif
+
+CFLAGS  += $(shell $(PKG_CONFIG) --cflags libiptc)
+LDLIBS  += $(shell $(PKG_CONFIG) --static --libs-only-l libiptc)
+LDFLAGS += $(shell $(PKG_CONFIG) --libs-only-L libiptc)
+LDFLAGS += $(shell $(PKG_CONFIG) --libs-only-other libiptc)
+else
+
+ARCH ?= $(shell uname -m | grep -q "x86_64" && echo 64)
+ifdef IPTABLESPATH
+CPPFLAGS := $(CPPFLAGS) -I$(IPTABLESPATH)/include/
+LDFLAGS := $(LDFLAFGS) -L$(IPTABLESPATH)/libiptc/
+# get iptables version and set IPTABLES_143 macro if needed
+ifeq ($(TARGET_OPENWRT),)
+IPTABLESVERSION := $(shell grep "\#define VERSION" $(IPTABLESPATH)/config.h | tr -d \" |cut -d" " -f3 )
+IPTABLESVERSION1 := $(shell echo $(IPTABLESVERSION) | cut -d. -f1 )
+IPTABLESVERSION2 := $(shell echo $(IPTABLESVERSION) | cut -d. -f2 )
+IPTABLESVERSION3 := $(shell echo $(IPTABLESVERSION) | cut -d. -f3 )
+# test if iptables version >= 1.4.3
+TEST := $(shell [ \( \( $(IPTABLESVERSION1) -ge 1 \) -a \( $(IPTABLESVERSION2) -ge 4 \) \) -a \( $(IPTABLESVERSION3) -ge 3 \) ] && echo 1 )
+ifeq ($(TEST), 1)
+CPPFLAGS := $(CPPFLAGS) -DIPTABLES_143
+# the following sucks, but works
+LDLIBS = $(IPTABLESPATH)/libiptc/.libs/libip4tc.o
+#LDLIBS = $(IPTABLESPATH)/libiptc/.libs/libiptc.a
+else # ifeq ($(TEST), 1)
+LDLIBS = $(IPTABLESPATH)/libiptc/libiptc.a
+endif # ifeq ($(TEST), 1)
+else # ($(TARGET_OPENWRT),)
+# openWRT :
+# check for system-wide iptables files. Test if iptables version >= 1.4.3
+# the following test has to be verified :
+TEST := $(shell test -f /usr/include/iptables/internal.h && grep -q "\#define IPTABLES_VERSION" /usr/include/iptables/internal.h && echo 1)
+ifeq ($(TEST), 1)
+CPPFLAGS := $(CPPFLAGS) -DIPTABLES_143
+LDLIBS = -liptc
+endif  # ($(TEST), 1)
+TEST_LIB := $(shell test -f /usr/lib$(ARCH)/libiptc.a && echo 1)
+ifeq ($(TEST_LIB), 1)
+LDLIBS = -liptc /usr/lib$(ARCH)/libiptc.a
+endif # ($(TEST_LIB), 1)
+endif # ($(TARGET_OPENWRT),)
+else # ifdef IPTABLESPATH
+# IPTABLESPATH not defined
+# the following test has to be verified :
+TEST := $(shell test -f /usr/include/xtables.h && grep -q "XTABLES_VERSION_CODE" /usr/include/xtables.h && echo 1)
+ifeq ($(TEST), 1)
+CPPFLAGS := $(CPPFLAGS) -DIPTABLES_143
+LDLIBS = -liptc
+TESTIP4TC := $(shell test -f /lib/libip4tc.so && echo 1)
+ifeq ($(TESTIP4TC), 1)
+LDLIBS := $(LDLIBS) -lip4tc
+endif # ($(TESTIP4TC), 1)
+TESTIP6TC := $(shell test -f /lib/libip6tc.so && echo 1)
+ifeq ($(TESTIP6TC), 1)
+LDLIBS := $(LDLIBS) -lip6tc
+endif # ($(TESTIP6TC), 1)
+endif # ($(TEST), 1)
+endif # ifdef IPTABLESPATH
+endif # ifdef PCFILE_FOUND
+
+LDLIBS += -lnfnetlink
+
+LDLIBS += $(shell $(PKG_CONFIG) --static --libs-only-l openssl)
+
+TESTUPNPDESCGENOBJS = testupnpdescgen.o upnpdescgen.o
+
+EXECUTABLES = miniupnpd testupnpdescgen testgetifstats \
+              testupnppermissions miniupnpdctl testgetifaddr \
+              testgetroute testasyncsendto testportinuse
+
+.PHONY:	all clean install depend genuuid
+
+all:	$(EXECUTABLES)
+
+clean:
+	$(RM) $(ALLOBJS)
+	$(RM) $(EXECUTABLES)
+	$(RM) testupnpdescgen.o testgetifstats.o
+	$(RM) testupnppermissions.o testgetifaddr.o
+	$(RM) testgetroute.o testasyncsendto.o
+	$(RM) miniupnpdctl.o
+
+install:	miniupnpd miniupnpd.8 miniupnpd.conf genuuid \
+	netfilter/iptables_init.sh netfilter/iptables_removeall.sh \
+	netfilter/ip6tables_init.sh netfilter/ip6tables_removeall.sh \
+	linux/miniupnpd.init.d.script
+	$(STRIP) miniupnpd
+	$(INSTALL) -d $(DESTDIR)$(SBININSTALLDIR)
+	$(INSTALL) miniupnpd $(DESTDIR)$(SBININSTALLDIR)
+	$(INSTALL) -d $(DESTDIR)$(ETCINSTALLDIR)
+	$(INSTALL) netfilter/iptables_init.sh $(DESTDIR)$(ETCINSTALLDIR)
+	$(INSTALL) netfilter/iptables_removeall.sh $(DESTDIR)$(ETCINSTALLDIR)
+	$(INSTALL) netfilter/ip6tables_init.sh $(DESTDIR)$(ETCINSTALLDIR)
+	$(INSTALL) netfilter/ip6tables_removeall.sh $(DESTDIR)$(ETCINSTALLDIR)
+	$(INSTALL) --mode=0644 -b miniupnpd.conf $(DESTDIR)$(ETCINSTALLDIR)
+	$(INSTALL) -d $(DESTDIR)$(PREFIX)/etc/init.d
+	$(INSTALL) linux/miniupnpd.init.d.script $(DESTDIR)$(PREFIX)/etc/init.d/miniupnpd
+	$(INSTALL) -d $(DESTDIR)$(MANINSTALLDIR)
+	$(INSTALL) --mode=0644 miniupnpd.8 $(DESTDIR)$(MANINSTALLDIR)
+	gzip -f $(DESTDIR)$(MANINSTALLDIR)/miniupnpd.8
+
+# genuuid is using the uuidgen CLI tool which is part of libuuid
+# from the e2fsprogs
+# 'cat /proc/sys/kernel/random/uuid' could be also used
+genuuid:
+	sed -i -e "s/^uuid=[-0-9a-f]*/uuid=`(genuuid||uuidgen||uuid) 2>/dev/null`/" miniupnpd.conf
+
+miniupnpd:	$(BASEOBJS) $(LNXOBJS) $(NETFILTEROBJS)
+
+testupnpdescgen:	$(TESTUPNPDESCGENOBJS)
+
+testgetifstats:	testgetifstats.o linux/getifstats.o
+
+testupnppermissions:	testupnppermissions.o upnppermissions.o
+
+testgetifaddr:	testgetifaddr.o getifaddr.o
+
+testgetroute:	testgetroute.o linux/getroute.o upnputils.o
+
+testasyncsendto:	testasyncsendto.o asyncsendto.o upnputils.o \
+	linux/getroute.o
+
+testportinuse:	testportinuse.o portinuse.o getifaddr.o \
+	netfilter/iptcrdr.o
+
+miniupnpdctl:	miniupnpdctl.o
+
+config.h:	config.h.optware
+	cp $< $@
+
+depend:	config.h
+	makedepend -f$(MAKEFILE_LIST) -Y \
+	$(ALLOBJS:.o=.c) $(TESTUPNPDESCGENOBJS:.o=.c) \
+	testgetifstats.c testupnppermissions.c testgetifaddr.c \
+	testgetroute.c testasyncsendto.c testportinuse.c \
+	miniupnpdctl.c 2>/dev/null
+
+# DO NOT DELETE
+
+miniupnpd.o: config.h macros.h upnpglobalvars.h upnppermissions.h
+miniupnpd.o: miniupnpdtypes.h upnphttp.h upnpdescgen.h miniupnpdpath.h
+miniupnpd.o: getifaddr.h upnpsoap.h options.h minissdp.h upnpredirect.h
+miniupnpd.o: upnppinhole.h daemonize.h upnpevents.h asyncsendto.h natpmp.h
+miniupnpd.o: pcpserver.h commonrdr.h upnputils.h ifacewatcher.h
+upnphttp.o: config.h upnphttp.h upnpdescgen.h miniupnpdpath.h upnpsoap.h
+upnphttp.o: upnpevents.h upnputils.h
+upnpdescgen.o: config.h getifaddr.h upnpredirect.h upnpdescgen.h
+upnpdescgen.o: miniupnpdpath.h upnpglobalvars.h upnppermissions.h
+upnpdescgen.o: miniupnpdtypes.h upnpdescstrings.h upnpurns.h getconnstatus.h
+upnpsoap.o: macros.h config.h upnpglobalvars.h upnppermissions.h
+upnpsoap.o: miniupnpdtypes.h upnphttp.h upnpsoap.h upnpreplyparse.h
+upnpsoap.o: upnpredirect.h upnppinhole.h getifaddr.h getifstats.h
+upnpsoap.o: getconnstatus.h upnpurns.h
+upnpreplyparse.o: upnpreplyparse.h minixml.h
+minixml.o: minixml.h
+portinuse.o: macros.h config.h upnpglobalvars.h upnppermissions.h
+portinuse.o: miniupnpdtypes.h getifaddr.h portinuse.h netfilter/iptcrdr.h
+portinuse.o: commonrdr.h
+upnpredirect.o: macros.h config.h upnpredirect.h upnpglobalvars.h
+upnpredirect.o: upnppermissions.h miniupnpdtypes.h upnpevents.h portinuse.h
+upnpredirect.o: netfilter/iptcrdr.h commonrdr.h
+getifaddr.o: config.h getifaddr.h
+daemonize.o: daemonize.h config.h
+upnpglobalvars.o: config.h upnpglobalvars.h upnppermissions.h
+upnpglobalvars.o: miniupnpdtypes.h upnpdescstrings.h
+options.o: config.h options.h upnppermissions.h upnpglobalvars.h
+options.o: miniupnpdtypes.h
+upnppermissions.o: config.h upnppermissions.h
+minissdp.o: config.h upnpdescstrings.h miniupnpdpath.h upnphttp.h
+minissdp.o: upnpglobalvars.h upnppermissions.h miniupnpdtypes.h minissdp.h
+minissdp.o: upnputils.h getroute.h asyncsendto.h codelength.h
+natpmp.o: macros.h config.h natpmp.h upnpglobalvars.h upnppermissions.h
+natpmp.o: miniupnpdtypes.h getifaddr.h upnpredirect.h commonrdr.h upnputils.h
+natpmp.o: portinuse.h asyncsendto.h
+pcpserver.o: config.h pcpserver.h macros.h upnpglobalvars.h upnppermissions.h
+pcpserver.o: miniupnpdtypes.h pcplearndscp.h upnpredirect.h commonrdr.h
+pcpserver.o: getifaddr.h asyncsendto.h pcp_msg_struct.h netfilter/iptcrdr.h
+pcpserver.o: commonrdr.h
+upnpevents.o: config.h upnpevents.h miniupnpdpath.h upnpglobalvars.h
+upnpevents.o: upnppermissions.h miniupnpdtypes.h upnpdescgen.h upnputils.h
+upnputils.o: config.h upnputils.h upnpglobalvars.h upnppermissions.h
+upnputils.o: miniupnpdtypes.h getroute.h
+getconnstatus.o: getconnstatus.h getifaddr.h
+upnppinhole.o: macros.h config.h upnpredirect.h upnpglobalvars.h
+upnppinhole.o: upnppermissions.h miniupnpdtypes.h upnpevents.h
+upnppinhole.o: netfilter/iptpinhole.h
+pcplearndscp.o: config.h upnpglobalvars.h upnppermissions.h miniupnpdtypes.h
+pcplearndscp.o: pcplearndscp.h
+asyncsendto.o: asyncsendto.h
+linux/getifstats.o: config.h getifstats.h
+linux/ifacewatcher.o: config.h ifacewatcher.h config.h minissdp.h
+linux/ifacewatcher.o: miniupnpdtypes.h getifaddr.h upnpglobalvars.h
+linux/ifacewatcher.o: upnppermissions.h natpmp.h
+linux/getroute.o: getroute.h upnputils.h
+netfilter/iptcrdr.o: macros.h config.h netfilter/iptcrdr.h commonrdr.h
+netfilter/iptcrdr.o: config.h upnpglobalvars.h upnppermissions.h
+netfilter/iptcrdr.o: miniupnpdtypes.h
+netfilter/iptpinhole.o: config.h netfilter/iptpinhole.h upnpglobalvars.h
+netfilter/iptpinhole.o: upnppermissions.h config.h miniupnpdtypes.h
+testupnpdescgen.o: macros.h config.h upnpdescgen.h upnpdescstrings.h
+testupnpdescgen.o: getifaddr.h
+upnpdescgen.o: config.h getifaddr.h upnpredirect.h upnpdescgen.h
+upnpdescgen.o: miniupnpdpath.h upnpglobalvars.h upnppermissions.h
+upnpdescgen.o: miniupnpdtypes.h upnpdescstrings.h upnpurns.h getconnstatus.h
+testgetifstats.o: getifstats.h
+testupnppermissions.o: upnppermissions.h config.h
+testgetifaddr.o: config.h getifaddr.h
+testgetroute.o: getroute.h upnputils.h upnpglobalvars.h upnppermissions.h
+testgetroute.o: config.h miniupnpdtypes.h
+testasyncsendto.o: miniupnpdtypes.h config.h upnputils.h asyncsendto.h
+testportinuse.o: macros.h config.h portinuse.h
+miniupnpdctl.o: macros.h
diff -Naur miniupnpd-1.4.20100921/miniupnpd.c miniupnpd-1.4.20100921-optware/miniupnpd.c
--- miniupnpd-1.4.20100921/miniupnpd.c	2010-09-21 16:31:43.000000000 +0100
+++ miniupnpd-1.4.20100921-optware/miniupnpd.c	2010-10-24 18:13:17.000000000 +0100
@@ -65,7 +65,7 @@
 #include "commonrdr.h"
 
 #ifndef DEFAULT_CONFIG
-#define DEFAULT_CONFIG "/etc/miniupnpd.conf"
+#define DEFAULT_CONFIG "%OPTWARE_TARGET_PREFIX%/etc/miniupnpd/miniupnpd.conf"
 #endif
 
 #ifdef USE_MINIUPNPDCTL
@@ -911,7 +911,11 @@
 #endif
 	}
 
+#ifdef MINIUPNPD_LOG_NOPID
+	openlog_option = LOG_CONS;
+#else
 	openlog_option = LOG_PID|LOG_CONS;
+#endif
 	if(debug_flag)
 	{
 		openlog_option |= LOG_PERROR;	/* also log on stderr */
diff -Naur miniupnpd-1.4.20100921/more miniupnpd-1.4.20100921-optware/more
--- miniupnpd-1.4.20100921/more	1970-01-01 01:00:00.000000000 +0100
+++ miniupnpd-1.4.20100921-optware/more	2010-10-24 18:35:04.000000000 +0100
@@ -0,0 +1 @@
+upnppermissions.c:	printf("perm rule added : %s %hu-%hu %08x/%08x %hu-%hu\n",
